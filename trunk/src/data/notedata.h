#ifndef NOTEDATA_H
#define NOTEDATA_H

#include <QString>
#include <QDateTime>
#include <QDataStream>
#include <QRegExp>
#include <QMetaType>

struct NoteIndex {

    // internal id used by Schnote database
    int id;

    // Note key generated by Simplenote servers
    QString key;

    // Title of the note
    QString title;

    // Short version of note data (to conserve memory)
    QString summary;

    // Note modifyDate
    QDateTime modifyDate;

    // Determines if note is marked as deleted
    bool deleted;

    // Note creation date
    QDateTime creationDate;

    bool changed;

    NoteIndex() {
        changed = false;
        deleted = false;
        id = -1;
    }

    void setTitleSummary(const QString &data) {

        QString gist = data.trimmed().left(255);

        int retPos = data.trimmed().indexOf(QRegExp("\r|\n"), 1);

        title   = (retPos > 0)  ? gist.left(retPos) : gist;
        summary = (retPos >= 0) ? gist.mid(retPos, 255).simplified() : "";

    }

};

struct Note {

    // Note index for syncing with Simplenote
    NoteIndex index;

    // Note data
    QString data;


    Note() { }

    Note(const QString &text) {
        setNote(text);
    }

    void setNote(const QString &text) {
        data = text;
        index.setTitleSummary(text);
    }

};

Q_DECLARE_METATYPE ( Note )

typedef QList<Note> NoteList;
typedef QList<NoteIndex> NoteIndexList;
typedef QHash<QString, NoteIndex> NoteIndexHash;

//Q_DECLARE_METATYPE(NoteIndexHash)

#endif // NOTEDATA_H
